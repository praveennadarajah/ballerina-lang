// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 Inc. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

# The SQL Datatype of the parameter.
#
# `VARCHAR` - Small, variable-length character string
# `CHAR` - Small, fixed-length character string
# `TEXT` -  Column with a maximum length of 65,535 characters.
# `NCHAR` - Small, fixed-length character string with unicode support
# `NVARCHAR` - Small, variable-length character string with unicode support
#
# `SMALLINT` - 16-bit signed integer value which may be unsigned or signed
# `INTEGER` - 32-bit signed integer value which may be unsigned or signed
# `BIGINT` - 64-bit signed integer value which may be unsigned or signed
#
# `NUMERIC` - Fixed-precision and scaled decimal values
# `DECIMAL` - Fixed-precision and scaled decimal values
# `REAL` - Single precision floating point number
# `FLOAT` - Double precision floating point number
# `DOUBLE` - Double precision floating point number
#
# `BIT` - Single bit value that can be zero or one, or nil
# `BOOLEAN` - Boolean value either True or false
#
# `BINARY` - Small, fixed-length binary value
# `BLOB` - Binary Large Object
# `LONGVARBINARY` - Large, variable-length binary value
# `VARBINARY` - Small, variable-length binary value
#
# `CLOB` - Character Large Object.
# `NCLOB` - Character large objects in multibyte national character set
#
# `DATE` - Date consisting of day, month, and year
# `TIME` - Time consisting of hours, minutes, and seconds
# `DATETIME` - Both DATE and TIME with additional a nanosecond field
# `TIMESTAMP` - Both DATE and TIME with additional a nanosecond field
#
# `ARRAY` - Composite data value that consists of zero or more elements of a specified data type
# `STRUCT` - User-defined structured type, consists of one or more attributes
# `REF` - A value that references a row in a reference table
# `ROW` - A value that uniquely identifies a row in a table
#
public type Type VARCHAR|CHAR|TEXT|CLOB|NCHAR|NVARCHAR|NCLOB|SMALLINT|INTEGER|BIGINT|NUMERIC|DECIMAL|REAL|FLOAT|DOUBLE|
BIT|BOOLEAN|BINARY|VARBINARY|BLOB|DATE|TIME|DATETIME|TIMESTAMP|ARRAY|REF|ROW|STRUCT;

public const VARCHAR = "VARCHAR";
public const CHAR = "CHAR";
public const TEXT = "TEXT";
public const CLOB = "CLOB";
public const NCHAR = "NCHAR";
public const NVARCHAR = "NVARCHAR";
public const NCLOB = "NCLOB";
public const SMALLINT = "SMALLINT";
public const INTEGER = "INTEGER";
public const BIGINT = "BIGINT";
public const NUMERIC = "NUMERIC";
public const DECIMAL = "DECIMAL";
public const REAL = "REAL";
public const FLOAT = "FLOAT";
public const DOUBLE = "DOUBLE";
public const BIT = "BIT";
public const BOOLEAN = "BOOLEAN";
public const BINARY = "BINARY";
public const VARBINARY = "VARBINARY";
public const BLOB = "BLOB";
public const DATE = "DATE";
public const TIME = "TIME";
public const DATETIME = "DATETIME";
public const TIMESTAMP = "TIMESTAMP";
public const ARRAY = "ARRAY";
public const REF = "REF";
public const ROW = "ROW";
public const STRUCT = "STRUCT";

# Represents a parameter for the SQL Client remote functions when a variable needs to be passed
# to the remote function.
#
# + sqlType - The data type of the corresponding SQL parameter
# + value - Value of paramter passed into the SQL statement
public type TypedValue record {|
   Type sqlType ;
   anydata|object{}|record{} value;
|};

# Possible type of parameters that can be passed into the SQL query.
public type Value string|int|boolean|float|decimal|byte[]|xml|json|TypedValue;

# Temporay solution util the language supports `Backtick string` natively as mentioned in
# https://github.com/ballerina-platform/ballerina-spec/issues/442.
#
# + parts - The seperated parts of the sql query
# + insertions - The values that should be filled in between the parts
public type ParameterizedString record {|
   string[] parts;
   Value[] insertions;
|};

# The result of the query without returning the rows.
#
# + affectedRowCount - Number of rows affected by the execution of the query
# + lastInsertId - The integer or string generated by the database in response to a query execution.
#                  Typically this will be from an "auto increment" column when inserting a new row. Not all databases
#                  support this feature, and hence it can be also nil
public type ExecuteResult record {
    int? affectedRowCount;
    string|int? lastInsertId;
};

# The result iterator object that is used to iterate through the results in the event stream.
#
type ResultIterator object {
    private boolean isClosed = false;
    private Error? err;

    public function __init(public Error? err = ()) {
        self.err = err;
    }

    public function next() returns record {|record {} value;|}|Error? {
        if (self.isClosed) {
            return closedStreamInvocationError();
        }
        error? closeErrorIgnored = ();
        if (self.err is Error) {
            return self.err;
        } else {
            record {}|Error? result = nextResult(self);
            if (result is record {}) {
                record {|
                    record {} value;
                |} streamRecord = {value: result};
                return streamRecord;
            } else if (result is Error) {
                self.err = result;
                closeErrorIgnored = self.close();
                return self.err;
            } else {
                closeErrorIgnored = self.close();
                return result;
            }
        }
    }

    public function close() returns Error? {
        if (!self.isClosed) {
            if (self.err is ()) {
                Error? e = closeResult(self);
                if (e is ()) {
                    self.isClosed = true;
                }
                return e;
            }
        }
    }
};
