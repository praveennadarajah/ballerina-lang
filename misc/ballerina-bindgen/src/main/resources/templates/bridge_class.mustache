{{#unless directClass}}// This is an empty Ballerina object autogenerated to represent the '{{className}}' Java class.
//
// If you need the implementation of this class generated, please use the following command.
//
// $ ballerina bindgen [(-cp|--classpath) <classpath>...] [(-o|--output) <output>] (<class-name>...)
//
// E.g. $ ballerina bindgen {{className}}

{{/unless}}{{#if directClass}}import ballerina/java;

{{/if}}{{#isInterface}}// Java Interface{{/isInterface}}{{#isAbstractClass}}// Java Abstract Class{{/isAbstractClass}}
public type {{shortClassName}} object {

    *JObject;
    {{#each superClasses}}
    public {{this}}T _tag{{@index}} = {{this}}T;
    {{/each}}
    public function __init(handle obj) {
        self.jObj = obj;
    }

    public function toString() returns string {

        return jObjToString(self.jObj);
    }{{#methodList}}{{#isInstance}}

    public function {{#reservedWord}}{{#controlChars methodName ""}}{{/controlChars}}{{/reservedWord}}{{#noReservedWord}}{{methodName}}{{/noReservedWord}}({{#parameters}}{{#if isPrimitiveArray}}{{#getType type ""}}{{/getType}}{{else}}{{shortTypeName}}{{/if}} {{fieldName}}{{#notLast}}, {{/notLast}}{{/parameters}}) {{#hasReturn}}returns {{returnType}}{{#if isStringReturn}}?{{/if}}{{#if exceptionTypes}}|error{{/if}} {{/hasReturn}}{{#noReturn}}{{#if exceptionTypes}}returns error? {{else if hasPrimitiveParam}}returns error? {{/if}}{{/noReturn}}{
    {{#if objectReturn}}{{#if isArrayReturn}}
        {{returnType}} obj = [];
        handle[] handleObj = <handle[]>getArrayFromHandle({{#exceptionTypes}}check {{/exceptionTypes}}{{prefix}}_{{methodName}}(self.jObj{{#noParams}}, {{/noParams}}{{#parameters}}{{#if isObjArray}}check getHandleFromObjectArray({{fieldName}}, "{{componentType}}"){{#notLast}}, {{/notLast}}{{else if isPrimitiveArray}}check getHandleFromArray({{fieldName}}, "{{componentType}}"){{#notLast}}, {{/notLast}}{{else if isString}}java:fromString({{fieldName}}){{#notLast}}, {{/notLast}}{{else}}{{fieldName}}{{#isObj}}.jObj{{/isObj}}{{#notLast}}, {{/notLast}}{{/if}}{{/parameters}}));
        int count = handleObj.length();
        foreach int i in 0 ... count-1 {
            obj[i].jObj = handleObj[i];
        }
        return obj;{{else}}
        {{returnType}} obj = new({{#if exceptionTypes}}check {{/if}}{{#if isStringReturn}}java:toString({{/if}}{{prefix}}_{{methodName}}(self.jObj{{#noParams}}, {{/noParams}}{{#parameters}}{{#if isObjArray}}check getHandleFromObjectArray({{fieldName}}, "{{componentType}}"){{#notLast}}, {{/notLast}}{{else if isPrimitiveArray}}check getHandleFromArray({{fieldName}}, "{{componentType}}"){{#notLast}}, {{/notLast}}{{else if isString}}java:fromString({{fieldName}}){{#notLast}}, {{/notLast}}{{else}}{{fieldName}}{{#isObj}}.jObj{{/isObj}}{{#notLast}}, {{/notLast}}{{/if}}{{/parameters}}){{#if isStringReturn}}){{/if}});
        return obj;{{/if}}{{else}}
        {{#hasReturn}}return {{/hasReturn}}{{#noReturn}}_ = {{/noReturn}}{{#if isStringReturn}}java:toString({{else if isArrayReturn}}<{{returnType}}>getArrayFromHandle({{/if}}{{#handleException}}check {{/handleException}}{{prefix}}_{{methodName}}(self.jObj{{#noParams}}, {{/noParams}}{{#parameters}}{{#if isObjArray}}check getHandleFromObjectArray({{fieldName}}, "{{componentType}}"){{#notLast}}, {{/notLast}}{{else if isPrimitiveArray}}check getHandleFromArray({{fieldName}}, "{{componentType}}"){{#notLast}}, {{/notLast}}{{else if isString}}java:fromString({{fieldName}}){{#notLast}}, {{/notLast}}{{else}}{{fieldName}}{{#isObj}}.jObj{{/isObj}}{{#notLast}}, {{/notLast}}{{/if}}{{/parameters}}){{#if isStringReturn}}){{else if isArrayReturn}}){{/if}};{{/if}}
    }{{/isInstance}}{{/methodList}}
};
{{#initFunctionList}}
public function new{{shortClassName}}{{constructorName}}({{#parameters}}{{shortTypeName}} {{fieldName}}{{#notLast}}, {{/notLast}}{{/parameters}}) returns {{shortClassName}}{{#exceptionTypes}}|error{{/exceptionTypes}} {
    handle{{#exceptionTypes}}|error{{/exceptionTypes}} obj = {{prefix}}_{{externalFunctionName}}({{#parameters}}{{#if isPrimitiveArray}}check getHandleFromArray({{fieldName}}, "{{componentType}}"){{#notLast}}, {{/notLast}}{{else if isString}}java:fromString({{fieldName}}){{#notLast}}, {{/notLast}}{{else}}{{fieldName}}{{#isObj}}.jObj{{/isObj}}{{#notLast}}, {{/notLast}}{{/if}}{{/parameters}});
    {{#exceptionTypes}}if (obj is handle) {
        {{/exceptionTypes}}{{shortClassName}} {{initObjectName}} = new(obj);
    {{#exceptionTypes}}    {{/exceptionTypes}}return {{initObjectName}};{{#exceptionTypes}}
    } else {
        return obj;
    }{{/exceptionTypes}}
}
{{/initFunctionList}}
{{#methodList}}{{#isStatic}}
public function {{methodPrefix}}_{{methodName}}({{#parameters}}{{#if isPrimitiveArray}}{{#getType type ""}}{{/getType}}{{else}}{{shortTypeName}}{{/if}} {{fieldName}}{{#notLast}}, {{/notLast}}{{/parameters}}) {{#hasReturn}}returns {{returnType}}{{#if isStringReturn}}?{{/if}}{{#exceptionTypes}}|error{{/exceptionTypes}} {{/hasReturn}}{{#noReturn}}{{#if exceptionTypes}}returns error? {{else if hasPrimitiveParam}}returns error? {{/if}}{{/noReturn}}{
{{#if objectReturn}}{{#if isArrayReturn}}
    {{returnType}} obj = [];
    handle[] handleObj = <handle[]>getArrayFromHandle({{#if exceptionTypes}}check {{/if}}{{prefix}}_{{methodName}}({{#parameters}}{{#if isObjArray}}check getHandleFromObjectArray({{fieldName}}, "{{componentType}}"){{#notLast}}, {{/notLast}}{{else if isPrimitiveArray}}check getHandleFromArray({{fieldName}}, "{{componentType}}"){{#notLast}}, {{/notLast}}{{else if isString}}java:fromString({{fieldName}}){{#notLast}}, {{/notLast}}{{else}}{{fieldName}}{{#isObj}}.jObj{{/isObj}}{{#notLast}}, {{/notLast}}{{/if}}{{/parameters}}));
    int count = handleObj.length();
    foreach int i in 0 ... count-1 {
        obj[i].jObj = handleObj[i];
    }
    return obj;{{else}}
    {{returnType}} obj = new({{#if exceptionTypes}}check {{/if}}{{#if isStringReturn}}java:toString({{/if}}{{prefix}}_{{methodName}}({{#parameters}}{{#if isObjArray}}check getHandleFromObjectArray({{fieldName}}, "{{componentType}}"){{#notLast}}, {{/notLast}}{{else if isPrimitiveArray}}check getHandleFromArray({{fieldName}}, "{{componentType}}"){{#notLast}}, {{/notLast}}{{else if isString}}java:fromString({{fieldName}}){{#notLast}}, {{/notLast}}{{else}}{{fieldName}}{{#isObj}}.jObj{{/isObj}}{{#notLast}}, {{/notLast}}{{/if}}{{/parameters}}){{#if isStringReturn}}){{/if}});
    return obj;{{/if}}{{else}}
    {{#hasReturn}}return {{/hasReturn}}{{#noReturn}}_ = {{/noReturn}}{{#if isStringReturn}}java:toString({{else if isArrayReturn}}<{{returnType}}>getArrayFromHandle({{/if}}{{#handleException}}check {{/handleException}}{{prefix}}_{{methodName}}({{#parameters}}{{#if isObjArray}}check getHandleFromObjectArray({{fieldName}}, "{{componentType}}"){{#notLast}}, {{/notLast}}{{else if isPrimitiveArray}}check getHandleFromArray({{fieldName}}, "{{componentType}}"){{#notLast}}, {{/notLast}}{{else if isString}}java:fromString({{fieldName}}){{#notLast}}, {{/notLast}}{{else}}{{fieldName}}{{#isObj}}.jObj{{/isObj}}{{#notLast}}, {{/notLast}}{{/if}}{{/parameters}}){{#if isStringReturn}}){{else if isArrayReturn}}){{/if}};{{/if}}
}
{{/isStatic}}{{/methodList}}{{#fieldList}}{{#isStatic}}{{/isStatic}}{{/fieldList}}{{#constructorList}}
function {{prefix}}_{{constructorName}}({{#parameters}}{{externalType}} {{fieldName}}{{#notLast}}, {{/notLast}}{{/parameters}}) returns handle{{#exceptionTypes}}|error{{/exceptionTypes}} = {{interopType}} {
    class: "{{className}}",
    paramTypes: [{{#parameters}}"{{type}}"{{#notLast}}, {{/notLast}}{{/parameters}}]
} external;
{{/constructorList}}{{#methodList}}
function {{prefix}}_{{methodName}}({{#isInstance}}handle receiver{{#noParams}}, {{/noParams}}{{/isInstance}}{{#parameters}}{{externalType}} {{fieldName}}{{#notLast}}, {{/notLast}}{{/parameters}}){{#hasReturn}} returns {{externalType}}{{#exceptionTypes}}|error{{/exceptionTypes}}{{/hasReturn}}{{#noReturn}}{{#handleException}} returns error?{{/handleException}}{{/noReturn}} = {{interopType}} {
    name: "{{javaMethodName}}",
    class: "{{className}}"{{#params}},
    paramTypes: [{{#parameters}}"{{type}}"{{#notLast}}, {{/notLast}}{{/parameters}}]{{/params}}
} external;
{{/methodList}}{{#fieldList}}
function {{prefix}}_{{fieldMethodName}}({{#isSetter}}handle receiver, {{returnType}} arg{{/isSetter}}) {{#hasReturn}}returns {{returnType}}{{#exceptionTypes}}|error{{/exceptionTypes}}{{/hasReturn}} = {{interopType}} {
    name: "{{fieldName}}",
    class: "{{className}}"
} external;
{{/fieldList}}
